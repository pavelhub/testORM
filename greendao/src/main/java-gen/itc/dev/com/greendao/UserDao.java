package itc.dev.com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import itc.dev.com.greendao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property First_name = new Property(3, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(4, String.class, "last_name", false, "LAST_NAME");
        public final static Property Photo_url = new Property(5, String.class, "photo_url", false, "PHOTO_URL");
        public final static Property Phone_code = new Property(6, String.class, "phone_code", false, "PHONE_CODE");
        public final static Property Phone_value = new Property(7, String.class, "phone_value", false, "PHONE_VALUE");
        public final static Property Age = new Property(8, Integer.class, "age", false, "AGE");
        public final static Property IsAdmin = new Property(9, Boolean.class, "isAdmin", false, "IS_ADMIN");
        public final static Property Height = new Property(10, Float.class, "height", false, "HEIGHT");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"EMAIL\" TEXT," + // 1: email
                "\"PASSWORD\" TEXT," + // 2: password
                "\"FIRST_NAME\" TEXT," + // 3: first_name
                "\"LAST_NAME\" TEXT," + // 4: last_name
                "\"PHOTO_URL\" TEXT," + // 5: photo_url
                "\"PHONE_CODE\" TEXT," + // 6: phone_code
                "\"PHONE_VALUE\" TEXT," + // 7: phone_value
                "\"AGE\" INTEGER," + // 8: age
                "\"IS_ADMIN\" INTEGER," + // 9: isAdmin
                "\"HEIGHT\" REAL);"); // 10: height
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(4, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(5, last_name);
        }
 
        String photo_url = entity.getPhoto_url();
        if (photo_url != null) {
            stmt.bindString(6, photo_url);
        }
 
        String phone_code = entity.getPhone_code();
        if (phone_code != null) {
            stmt.bindString(7, phone_code);
        }
 
        String phone_value = entity.getPhone_value();
        if (phone_value != null) {
            stmt.bindString(8, phone_value);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(9, age);
        }
 
        Boolean isAdmin = entity.getIsAdmin();
        if (isAdmin != null) {
            stmt.bindLong(10, isAdmin ? 1L: 0L);
        }
 
        Float height = entity.getHeight();
        if (height != null) {
            stmt.bindDouble(11, height);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // first_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // last_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photo_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone_value
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // age
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isAdmin
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10) // height
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirst_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLast_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoto_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone_value(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAge(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsAdmin(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setHeight(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
